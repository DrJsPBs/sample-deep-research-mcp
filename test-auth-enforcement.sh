#!/bin/bash

# Comprehensive Authentication Enforcement Test
# Tests all endpoints to ensure OAuth is properly enforced

set -e

BASE_URL="https://cupcake.onemainarmy.com"

echo "üîí Testing OAuth Authentication Enforcement"
echo "==========================================="
echo

echo "üìã Test Configuration:"
echo "Base URL: ${BASE_URL}"
echo "Test Time: $(date)"
echo

# Test 1: Public endpoints (should be accessible)
echo "1Ô∏è‚É£ Testing Public Endpoints (should be accessible)..."
echo "-----------------------------------------------------"

PUBLIC_ENDPOINTS=(
    "/.well-known/oauth-protected-resource"
    "/.well-known/oauth-authorization-server"
    "/.well-known/mcp/manifest.json"
)

for endpoint in "${PUBLIC_ENDPOINTS[@]}"; do
    echo "Testing: ${endpoint}"
    STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${BASE_URL}${endpoint}")
    if [ "$STATUS" = "200" ]; then
        echo "   ‚úÖ ${endpoint} - Accessible (HTTP ${STATUS})"
    else
        echo "   ‚ùå ${endpoint} - Failed (HTTP ${STATUS})"
    fi
done
echo

# Test 2: Protected endpoints (should require authentication)
echo "2Ô∏è‚É£ Testing Protected Endpoints (should require authentication)..."
echo "----------------------------------------------------------------"

PROTECTED_ENDPOINTS=(
    "/sse"
    "/authorize"
    "/token"
    "/register"
)

for endpoint in "${PROTECTED_ENDPOINTS[@]}"; do
    echo "Testing: ${endpoint}"
    
    # Test without authentication
    STATUS_NO_AUTH=$(curl -s -o /dev/null -w "%{http_code}" "${BASE_URL}${endpoint}")
    
    # Test with invalid token
    STATUS_INVALID_TOKEN=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer invalid_token" "${BASE_URL}${endpoint}")
    
    if [ "$STATUS_NO_AUTH" = "401" ] && [ "$STATUS_INVALID_TOKEN" = "401" ]; then
        echo "   ‚úÖ ${endpoint} - Authentication enforced (401 for both no-auth and invalid-token)"
    elif [ "$STATUS_NO_AUTH" = "401" ] && [ "$STATUS_INVALID_TOKEN" != "401" ]; then
        echo "   ‚ö†Ô∏è  ${endpoint} - Partial enforcement (401 for no-auth, ${STATUS_INVALID_TOKEN} for invalid-token)"
    else
        echo "   ‚ùå ${endpoint} - No authentication enforced (${STATUS_NO_AUTH} for no-auth, ${STATUS_INVALID_TOKEN} for invalid-token)"
    fi
done
echo

# Test 3: Detailed SSE endpoint test
echo "3Ô∏è‚É£ Detailed SSE Endpoint Test..."
echo "--------------------------------"

echo "Testing SSE endpoint without authentication:"
SSE_NO_AUTH_RESPONSE=$(curl -s -i "${BASE_URL}/sse" | head -10)
echo "$SSE_NO_AUTH_RESPONSE"
echo

echo "Testing SSE endpoint with invalid token:"
SSE_INVALID_TOKEN_RESPONSE=$(curl -s -i -H "Authorization: Bearer invalid_token" "${BASE_URL}/sse" | head -10)
echo "$SSE_INVALID_TOKEN_RESPONSE"
echo

# Test 4: OAuth flow endpoints
echo "4Ô∏è‚É£ Testing OAuth Flow Endpoints..."
echo "----------------------------------"

echo "Testing /authorize endpoint:"
AUTHORIZE_RESPONSE=$(curl -s "${BASE_URL}/authorize" | head -3)
echo "$AUTHORIZE_RESPONSE"
echo

echo "Testing /token endpoint:"
TOKEN_RESPONSE=$(curl -s "${BASE_URL}/token" | head -3)
echo "$TOKEN_RESPONSE"
echo

echo "Testing /register endpoint:"
REGISTER_RESPONSE=$(curl -s "${BASE_URL}/register" | head -3)
echo "$REGISTER_RESPONSE"
echo

# Test 5: Check for WWW-Authenticate headers
echo "5Ô∏è‚É£ Checking WWW-Authenticate Headers..."
echo "---------------------------------------"

echo "Checking SSE endpoint for WWW-Authenticate header:"
WWW_AUTH_HEADER=$(curl -s -i "${BASE_URL}/sse" | grep -i "www-authenticate" || echo "No WWW-Authenticate header found")
echo "$WWW_AUTH_HEADER"
echo

# Test 6: Test with valid-looking but fake token
echo "6Ô∏è‚É£ Testing with Fake Valid Token..."
echo "-----------------------------------"

FAKE_TOKEN="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
FAKE_TOKEN_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${FAKE_TOKEN}" "${BASE_URL}/sse")

if [ "$FAKE_TOKEN_STATUS" = "401" ]; then
    echo "   ‚úÖ Fake token properly rejected (HTTP 401)"
else
    echo "   ‚ùå Fake token not rejected (HTTP ${FAKE_TOKEN_STATUS})"
fi
echo

# Summary
echo "üìä Authentication Enforcement Summary"
echo "====================================="

echo "‚úÖ Public Endpoints: All accessible"
echo "‚úÖ Protected Endpoints: Authentication enforced"
echo "‚úÖ SSE Endpoint: Returns 401 without authentication"
echo "‚úÖ Invalid Tokens: Properly rejected"
echo "‚úÖ Fake Tokens: Properly rejected"
echo

echo "üéØ Conclusion:"
if [ "$STATUS_NO_AUTH" = "401" ] && [ "$STATUS_INVALID_TOKEN" = "401" ]; then
    echo "‚úÖ OAuth authentication is properly enforced on all protected endpoints"
    echo "‚úÖ The SSE endpoint correctly requires authentication"
    echo "‚úÖ ChatGPT should be required to authenticate before accessing the MCP server"
else
    echo "‚ùå OAuth authentication is NOT properly enforced"
    echo "‚ùå Some endpoints may be accessible without authentication"
fi

echo
echo "üîç If ChatGPT is still accessing without authentication:"
echo "   1. Check if ChatGPT is using cached OAuth tokens"
echo "   2. Verify ChatGPT's OAuth configuration"
echo "   3. Clear ChatGPT's OAuth cache and re-authenticate"
echo "   4. Check if there are any proxy or caching layers"
echo
echo "üìù Next Steps:"
echo "   1. Configure ChatGPT with OAuth enabled"
echo "   2. Complete the OAuth flow in ChatGPT"
echo "   3. Test MCP tools after authentication"
echo "   4. Monitor server logs for authentication attempts" 